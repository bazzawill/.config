console.log(i)
s += "0"
for (let i = 0; i < (10**100); i++){
s = "1"
for (let i = 0; i < (10**100); i++){
}
console.log(s)
s += "0"
for (let i = 0; i < (10**100); i++){
s = "1"
//for (let i = 0; i < (10**100
:que
n = 0xB
n = 0xA
n +=10
n = 0x0
.exit
.quit()
quit()
i.toString(16):que
i.toString(16)
i=11
i.toString(16)
i = 10
10.toString(16)
.exit
:quit
.save framingRectangles.js
h%1==0
h%1=0
h=((2*i)+4)/(i-2)
i = 4
.quit
.exit
.save this.js
}
arr.forEach(function (element, index) {
arr.forEach((element, index) => {
function myFunc (arr)
largest = "my".length > largest ? "my".length : largest
largest = "myString".length > largest ? "myString".length : largest
largest
largest = "myString".length > largest ? "myString".length : largest
largest = 0
largest
largest = "myString".length > largest ? "myString".length : largest
"myString".length
largest
largest = "myString".length > largest ? "myString".largest : largest
let largest = 0
compose (square, sum)(5,8)
                                compose(square, sum)(2,3)  // => 25; the square of the sum
                                const square = x => x*x;
                                const sum = (x,y) => x+y;
                                }
                                };
                            return f.call(this, g.apply(this, args));
                    // apply for g because we're passing an array of values.
            // We use call for f because we're passing a single value and
    return function(...args) {
function compose(f, g) {
// Both f and g are invoked with the same this value as h was invoked with.
// the return value of g to f, then returns the return value of f.
// The returned function h passes all of its arguments to g, then passes
// Return a new function that computes f(g(...)).
.load compose.js
.exit
.quit
    incrementAll([1,2,3])  // => [2,3,4]
    const incrementAll = mapper(increment);
    const increment = x => x+1;
    }
    return a => map(a, f);
function mapper(f) {
// Contrast this with the map() function from earlier.
// each element, returning the array of return values.
// Return a function that expects an array argument and applies f to
.load mapper.js
[2,3,4].some(even)
[2,3,4].every(even)
[2,3,4].every(odd)
                        [1,1,3,5,5].every(odd)         // => true: every element of the array is odd
                        const odd = not(even);         // A new function that does the opposite
                        const even = x => x % 2 === 0; // A function to determine if a number is even
                        }
                        };
                    return !result;                    // and negates its result.
            let result = f.apply(this, args);  // that calls f
    return function(...args) {             // Return a new function
function not(f) {
// arguments to f and returns the logical negation of f's return value;
// This higher-order function returns a new function that passes its
.load not.js
[2,4,6,2,10].some(even)
[2,4,6,2,10].every(even)
[1,4,3,1,3].every(even)
even.every(even)
even(2,3)
even(2)
even(1)
even(1_
even([1,2,4,1])
[1,4,3,1,3].even()
const even = x => x % 2 === 0
randomise()
func(1,2)
func (1)
func = (a, b = 6) => a +b
o.f().y(2)
o.f = function () {return this}
o.y(2)
o.f()
o.f().y()
o = {f() {return 1}, y(x) {return x +1} }
plus().one()
plus (2)
one().plus()
function plus(x) {return x + 1}
one()
function one () {return 1}
o["a"]
o.a
o[0]
o = {a:1}
th
that
thing
[thing,that,th] = [1,2,3]
th
that
thing
let thing,that,th;
let this,that,th;
let this,that,th
let [this,that,th] = [1,2,3]
;
ar
ar.splice(Math.ceil(ar.length/2), 0, 3, 4)
ar = [1,2,9]
ar
ar.splice(Math.floor(ar.length/2), 0, 3, 4)
ar = [1,2,9]
ar.splice(Math.floor(arr.length/2), 0, 3, 4)
ar = [1,2,9]
arr
arr.splice(arr.length/2, 0, 3, 4)
arr = [1,2,5,6]
.exit
.quit()
.quit
.save object.js
oo.f(2)
oo = {f(x){return x*2}} 
oo = {f(x) => x*2} 
yy.toString()
yy.toLocaleString()
yy.toLocaleString
yy= 1000
o.f(2)
o = {f: (x) => x+2}
obj.f(1)
obj = {f: function(x) {return x+1}};
obj = {f: function(x) return x+1};
Object.prototype
oo = {o:0,}
oo
os
arr
""
arr. 
arr.""
arr
x
arr.
arr = {"": 500, x:100}
.quit()
for (o of obj) console.log(o);
obj["x"]
obj[x]
for (o in obj) console.log(obj[o]);
obj.o
obj.x
for (o in obj) console.log(obj.o);
for (o in obj) console.log(o);
let obj = {x: 1, y:2, z:3}
a
a.push(...b, l)
a
a.pop()
l= a[1]
b = [1,2,3,4,5,6,7,8]
a
a.pop()
a
a.pop()
a
a.push(a[1])
a = [1,2,3]
(5%2).toString()
5%2
5%2.toString()
.save test.js
.save
save
2**3
2**0
2**1
binary(01101)
8+4+1
16+8+1
)
binary(01101
01101
binary (1101)
}
	return bin
	}
		bin += str[i] * (2**p)
	for (let i = str.length - 1, p=0; i; i--, p++){
	let bin = 0
	let str = decimal.toString();
function binary(decimal) {
Math.min(...a)
Math.min(a)
math.min(a)
a = [1,2,3]
a
Math.max(1,2,3)
Math.min(1,2,3)
for (let i=0; i<9; i++) console.log(i)
for (let i=0; i<=9; i++) console.log(i)
i
false ? "this": false ? "that" : false ? "tt" : "neither"
false ? "this": false ? "that" : true ? "tt" : "neither"
false ? "this": false ? "that" : "neither"
false ? "this": true ? "that" : "neither"
true ? "this": true ? "that" : "neither"
true ? "this": false ? "that" : "neither"
true ? "this": false ? "that" : "neither
p7(9)
const p7 = makePlusFunc(7)
plusSeven = makePlusFunc(7)
const plusSeven = makePlusFunc(7)
makePlusFunc(4)(5)
const makePlusFunc = (base) => (fun) => base + fun;
plusSeven(14)
const plusSeven = makeAdder(7)
add5(5)
const add5 = makeAdder(5);
}
  };
    return x + y;
  return function(y) {
function makeAdder(x) {
str = "AAABB"
for (let i = 0; i<10; i++) console.log(i)
math.toRadians(90)
Math.sin(330*Math.PI/180)
Math.cos(300*Math.PI/180)
Math.sin(45*Math.PI/180)
Math.sin(Math.PI/8)
Math.sin(Math.PI/2)
Math.sin(Math.PI/4)
Math.sin(Math.PI/2)
Math.sin(90)
Math.asin(Math.PI)
Math.sin(90)
Math.sin(Math.PI)
alert("this")
prompt
let n = Number(prompt("Please enter a positive integer", ""));
void AF()
AF()
let AF = () => "this"
aF()
aF => "this"
a
a()
a => "this"
a => "this")
a => return("this")
void myFunc
myFunc()
}
b=4
a=5
function myFunc (){
myFunc()
let myFunc => {
myFunc()
}
b=6
a=5
myFunc => {
a[6][0]
a[0]
i[0]
a
for (a[i++] of Object.entries(o));
for (a[i++] of Object.entries(o);
for (a[i++] of o);
Object.entries(o)
Object.keys(o)
for(let i of a) console.log(i);
for(let i in a) console.log(i);
or(let i in a) console.log(i);
for (a[i++] in o);
a
o
for (a[i++] in Object.entries(o));
let a = [], i = 0;
for (i in o) console.log(i)
o[0]
o
let o = {q:1,w:2,e:3};
let o = {q=1,w=2,e=3};
console.log(o)
ob
os
t[10] = 5
let t = []
}
console.log(v)
console.log(k)
for (let [k, v] of m){
}
v
k
for (let [k, v] of m){
m = new Map([[1, "one"], [2, "two"]]);
let m = new Map([[1, "one"], [2, "two"]]);
let m = new Map([[1, "one"], [2, "two"]);
m.delete
let m = new Map([[1, "one"]]);
text
wordSet
let unique = [];
let wordSet = new Set(text.split(" "));
let text = "Na na na na na na na na Batman!";
console.log(`the value of ${k} is ${v}')}
for (let [k, v] of Object.entries(ob)){
}
console.log(`the value of ${k} is ${v}')
for (let [k, v] of Object.entries(ob)){
let ob = {a:0,b:1,c:2};
let ob = {a=0,b=1,c=2};
;
let ob = {a=0,b=1,c=2}
a = 0;
let ob = {
as
b = 1
a = 0
let ob = {
let ob {
ob{
my {
my()
a()
a
}
c = 2
b = 1
a = 0
my =>{
l
j
i
i=0,j=1,l=2
l
j
i
i=0;j=1;l=2
i=0,j=1,l=2
let i,j,l
let i,j,let
false ? "this": "that"
true ? "this": "that"
"4"<= 4
"4"<== 4
"4"< 4
for (let i = 1; i!==11; i++) console.log(i);
if (true ^^ true) console.log("true"
for (let i = 1; i!==11; i++) console.log(i);
for (let i = 1; i!==10; i++) console.log(i);
for (let i = 1; i===10; i++) console.log(i);
for (let i = 1; i=10; i++) console.log(i);
for (let i = 1; i<10; i++) console.log(i);
for (let i = 1; i<10; ++i) console.log(i);
for (let i = 1; i<10; 1++) console.log(i);
for (let i = 1; i<10; ++1) console.log(i);
++x
x++
let x = 1
x
-(5**4)
-(5)**4
(-5)**4
-5**4
x=?4:5
x
delete(x)
x delete
1
x+++
x++++
x
x++
x
x +=1
x++
x=3
3++
if ((true && true || false) && false) console.log("true")
if (true && true || false && false) console.log("true")
if (true && true || false && true) console.log("true")
.quit()
0;10;1c:que
tan(180)
tan(1/1)
cos(1/1)
let {cos,sin,tan} = Math
[a,b]
let [a,b] = [1,2]
j
globalThis[timers]
globalThis
globaltimeOrigin
global
!!x
!x
Boolean(x)
x =0
!!!!x
!!!x
!!x
!x
Boolean(x)
x = 1
global(loopStart)
global.bootstrapComplete
global
.quit
quit
myFunc("this is what")
}
return(x)
console.log(x)
myFunc = x => {
console.log("\u{1F600}");
.save test.js
.save
Math.sqrt(2)
sqrt(2)
points.dist()
};
 b*b); // Math.sqrt() computes the square root
 return Math.sqrt(a*a + // The Pythagorean theorem
 let b = p2.y-p1.y; // Difference in y coordinates
 let a = p2.x-p1.x; // Difference in x coordinates
 let p2 = this[1]; // Second element of the "this" object
 let p1 = this[0]; // First element of array we're invoked on
points.dist = function() { // Define a method to compute distance between points
.editor
2**4
1**3
1**2
1*1
1^2
points.dist()
}
return Math.sqrt(a^2 + b^2)
let b = p2.y-p1.y;
let a = p2.x-p1.x;
let p2 = this [1];
let p1 = this [0];
points.dist = function() {
}
]
return Math.sqrt(a^2 + b^2)
let b = p2.y-p1.y;
let a = p2.x-p1.x;
let p2 = this [1];
let p1 = this [0];
points.dist = function() {
myFunc("print this please")
const myFunc = myString => console.log(myString);
data.trial1[1][0]
};
 trial2: [[2,3], [4,5]] // The elements of the arrays are arrays.
 trial1: [[1,2], [3,4]], // The value of each property is an array.
let data = { // An object with 2 properties
];
 {x: 1, y: 1}
 {x: 0, y: 0}, // Each element is an object.
let points = [ // An array with 2 elements.
x+y
let y = 3
let x = 2
x + x
let y = 3
let x = 2
.exit
.editor
quit First element of array we're invoked on
points.dist = function() { // Define a method to compute distance between points
.editor
2**4
1**3
1**2
1*1
1^2
points.dist()
}
return Math.sqrt(a^2 + b^2)
let b = p2.y-p1.y;
let a = p2.x-p1.x;
let p2 = this [1];
let p1 = this [0];
points.dist = function() {
}
]
return Math.sqrt(a^2 + b^2)
let b = p2.y-p1.y;
let a = p2.x-p1.x;
let p2 = this [1];
let p1 = this [0];
points.dist = function() {
myFunc("print this please")
const myFunc = myString => console.log(myString);
data.trial1[1][0]
};
 trial2: [[2,3], [4,5]] // The elements of the arrays are arrays.
 trial1: [[1,2], [3,4]], // The value of each property is an array.
let data = { // An object with 2 properties
];
 {x: 1, y: 1}
 {x: 0, y: 0}, // Each element is an object.
let points = [ // An array with 2 elements.
x+y
let y = 3
let x = 2
x + x
let y = 3
let x = 2
.exit
.editor
quit